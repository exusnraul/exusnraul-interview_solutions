Skiils or basic concepts 

Concepts:-

Global namespace leakage	
python memory management?	
snippet for circular references?	
decorator function for given arguments (4,2) and (2,4),(10,5) and (5,10)
_slots_	
Name mangling?
monkey patching?
what are solid principles?
python clousers?
what are coroutines in python?
Private variable sin python ?
endpoint and run cmd?
what are middle-wares in django?
types of serialisations?
class based and function based views?
stored procedures and materialised views?
what are indexes?
mixins?
docker

Python:-
How python memory management works?
Garbage Collector
GIL
What are python closures
What are under methods? Difference between call and new methods
Tuple and list wrt memory and speed?
What are the difference between sort and sorted
Difference between shallow copy and deep copy
What pickling and unpickling
Write custom generators
Class methods and instance methods and static methods
Multithreading and multiprocessing
Solids principles
Design patterns
Monkey patching
Duck typing
Mixing in python
Name mangling in python
Gil in python
Multithreading and multiprocessing in python
Coroutines in python
Generators in python
Decorations in python
Iterators and iterables in python
global interpreter lock
__slots__, 
class methods
static and instance methods
decorators
generators
.py and .pyc
pickling and unpickling?
Private variables in python write sample class and demonstrate
write sample code for multiple inheritance


Django:-
Django architecture( how request and response cycle works in python)
How request and response cycles works in Django
Custom exceptions in Django
middle-wares in Django
function based and class based views
request and response cycle in django


Docker:-
docker , docker compose , dockerfile
CMD,RUN, endpoint
Layers
Docker Cache and why?
CHRoot
Docker Commands
Scaling concepts
Security of API

GIT:-
git stash
git rebase
GIt, difference in git rebase and merge, 
How do you use git for code management.


AWS:-
AWS ECS, EC2, Elastic cache(Redis),Aurora, DynamoDB

System Design:-
Monolethic and microservice architecture
horizontal and vertical scaling
Socketio , websocket
REST , JWT


Database:-
Indexing
composit indexes
transactions
stored procedures and materialised views?

Pandas
Dropping Columns in a DataFrame
inplace=True



Programming in Python:-
basic programs like, prime number, fibonacci, sorting wala, bubble or insertion sort,or merge sort
Linear , Binary search , List , Stack
String Anagram
Duplicates remove
addition as per input 
closures
decorators example
inheritance examples
classes
wrappers
lambda and turnery operators

SOlutions:-

# =============string anagram ================

def sample(l):

    d={}

    ll=[]

    for i in l:

        key=''.join(sorted(i))

        if key in d.keys():

            d[key].append(i)

        else:

            d[key]=[]

            d[key].append(i)

    for i ,j in d.items():

        ll.append(j)

    return ll

 

 

l=["dog","god","abc","bca",'mallu','ullam','psl','lsp']

aa=sample(l)

print(aa)

———————————

 

# ================AAABBBEDDQQ=================

l=list('AAABBBEDDQQ')

print(l)

 

ll={}

for i in l:

    print(i)

    if i not in ll:

        ll[i]=1

    else:

        ll[i]=ll[i]+1

s=''

for i,j in ll.items():

    print(i,j)

    s=s+str(i)+str(j)

print(s)

print(ll)

 

 

———————— half of list elect sort and keep remaining and append both

 

l = [9,2,6,4,1,3,8,5]

 

print(len(l)//2)

 

ll=l[:(len(l)//2)]

 

def bubblesort(list):

    for i in range(len(list)-1,0,-1):

        for j in range(i):

            if list[j]>list[j+1]:

                list[j],list[j+1]=list[j+1],list[j]

    return list

 

list=[2,1,3,5,4,50,100,33,44]

res=bubblesort(ll)

res.extend(l[(len(l)//2):])

print(res)

 

print(ll)

 

============= python closurer ======================

# some_summ(1)(2)(1, 2, 3) #-> 9

def outer(y):

    def inner(x):

        print("xxxxxxxx",x)

        print("yyyyyyyy",y)

        def inner2(a,b,c):

            return x+y+a+b+c

        return inner2

    return inner

result = outer(1)(2)(1,2,3)

print(result)

 

# some_summ(1)(2)(1, 2, 3) #-> 9

def outer(x):

    def inner():

        print("xxxxxxxx",x)

        

        def inner2():

            return x

        return inner2

    return inner

result = outer(1)()()

print(result)